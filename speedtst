#!/usr/bin/env python3
import tkinter as tk
from tkinter import ttk
import subprocess
import threading
import sys
import os
from tkinter import font

class SpeedTestApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Internet Speed Test")
        self.root.geometry("500x600")  # Adjusted for new features
        self.root.resizable(False, False)
        self.root.configure(bg="#121212")  # Full dark mode background

        # Custom Fonts
        self.title_font = font.Font(family="Helvetica", size=22, weight="bold")
        self.result_font = font.Font(family="Helvetica", size=18, weight="bold")
        self.sub_font = font.Font(family="Helvetica", size=14)

        # Initialize variables
        self.download_speed = tk.StringVar(value="0.0 Mbps")
        self.upload_speed = tk.StringVar(value="0.0 Mbps")
        self.ping = tk.StringVar(value="0 ms")

        self.create_widgets()

    def create_widgets(self):
        # Gradient Background
        self.canvas = tk.Canvas(self.root, width=500, height=600, bg="#121212", highlightthickness=0)
        self.canvas.pack(fill="both", expand=True)
        self.create_gradient("#121212", "#1e1e2f", 500, 600)

        # Title Label
        title_label = tk.Label(
            self.root,
            text="Speed Test",
            font=self.title_font,
            bg="#1e1e2f",
            fg="#ffffff"
        )
        title_label.place(relx=0.5, rely=0.1, anchor="center")

        # Loading Animation Canvas
        self.loading_canvas = tk.Canvas(self.root, width=120, height=120, bg="#1e1e2f", highlightthickness=0)
        self.loading_canvas.place(relx=0.5, rely=0.3, anchor="center")
        self.loading_angle = 0
        self.animate_loading()

        # Buttons Frame
        button_frame = tk.Frame(self.root, bg="#1e1e2f")
        button_frame.place(relx=0.5, rely=0.5, anchor="center")

        # Rounded Button Style
        button_style = {
            "font": ("Helvetica", 12),
            "bg": "#bb86fc",
            "fg": "#121212",
            "activebackground": "#3700b3",
            "activeforeground": "#ffffff",
            "relief": "flat",
            "padx": 15,
            "pady": 10,
            "borderwidth": 0,
            "highlightthickness": 0
        }

        # Test Buttons
        self.full_test_button = tk.Button(button_frame, text="Full Test", command=self.run_full_test, **button_style)
        self.full_test_button.grid(row=0, column=0, padx=10, pady=10)

        self.download_button = tk.Button(button_frame, text="Download Only", command=self.run_download_test, **button_style)
        self.download_button.grid(row=0, column=1, padx=10, pady=10)

        self.upload_button = tk.Button(button_frame, text="Upload Only", command=self.run_upload_test, **button_style)
        self.upload_button.grid(row=1, column=0, padx=10, pady=10)

        self.ping_button = tk.Button(button_frame, text="Ping Only", command=self.run_ping_test, **button_style)
        self.ping_button.grid(row=1, column=1, padx=10, pady=10)

        # Results Frame
        self.results_frame = tk.Frame(self.root, bg="#1e1e2f")
        self.results_frame.place(relx=0.5, rely=0.7, anchor="center")

        # Download Icon and Label
        download_icon = tk.Label(self.results_frame, text="⬇️", font=("Arial", 18), bg="#1e1e2f", fg="#bb86fc")
        download_icon.grid(row=0, column=0, padx=10, pady=5, sticky="w")
        self.download_label = tk.Label(
            self.results_frame,
            textvariable=self.download_speed,
            font=self.result_font,
            bg="#1e1e2f",
            fg="#bb86fc"
        )
        self.download_label.grid(row=0, column=1, padx=10, pady=5, sticky="w")

        # Upload Icon and Label
        upload_icon = tk.Label(self.results_frame, text="⬆️", font=("Arial", 18), bg="#1e1e2f", fg="#bb86fc")
        upload_icon.grid(row=1, column=0, padx=10, pady=5, sticky="w")
        self.upload_label = tk.Label(
            self.results_frame,
            textvariable=self.upload_speed,
            font=self.result_font,
            bg="#1e1e2f",
            fg="#bb86fc"
        )
        self.upload_label.grid(row=1, column=1, padx=10, pady=5, sticky="w")

        # Ping Icon and Label
        ping_icon = tk.Label(self.results_frame, text="🏓", font=("Arial", 18), bg="#1e1e2f", fg="#bb86fc")
        ping_icon.grid(row=2, column=0, padx=10, pady=5, sticky="w")
        self.ping_label = tk.Label(
            self.results_frame,
            textvariable=self.ping,
            font=self.result_font,
            bg="#1e1e2f",
            fg="#bb86fc"
        )
        self.ping_label.grid(row=2, column=1, padx=10, pady=5, sticky="w")

    def create_gradient(self, color1, color2, width, height):
        """Create a gradient background."""
        for i in range(height):
            r1, g1, b1 = self.root.winfo_rgb(color1)
            r2, g2, b2 = self.root.winfo_rgb(color2)
            r = int(r1 + (r2 - r1) * i / height)
            g = int(g1 + (g2 - g1) * i / height)
            b = int(b1 + (b2 - b1) * i / height)
            color = f"#{r >> 8:02x}{g >> 8:02x}{b >> 8:02x}"
            self.canvas.create_line(0, i, width, i, fill=color)

    def animate_loading(self):
        # Pulsating arc animation
        self.loading_canvas.delete("all")
        self.loading_canvas.create_arc(
            10, 10, 110, 110,
            start=self.loading_angle,
            extent=90,
            outline="#bb86fc",
            width=8,
            style="arc"
        )
        self.loading_angle = (self.loading_angle + 10) % 360
        self.root.after(50, self.animate_loading)

    def run_full_test(self):
        self.start_test(["--simple"])

    def run_download_test(self):
        self.start_test(["--no-upload", "--simple"])

    def run_upload_test(self):
        self.start_test(["--no-download", "--simple"])

    def run_ping_test(self):
        self.start_test(["--no-download", "--no-upload", "--simple"])

    def start_test(self, args):
        # Disable all buttons during the test
        self.full_test_button.config(state="disabled")
        self.download_button.config(state="disabled")
        self.upload_button.config(state="disabled")
        self.ping_button.config(state="disabled")

        # Reset results
        self.download_speed.set("0.0 Mbps")
        self.upload_speed.set("0.0 Mbps")
        self.ping.set("0 ms")

        # Run the speed test in a separate thread
        threading.Thread(target=lambda: self.run_speedtest(args)).start()

    def run_speedtest(self, args):
        try:
            # Use the virtual environment's Python to run speedtest-cli
            venv_python = os.path.join(os.getcwd(), "venv", "bin", "python")
            result = subprocess.run(
                [venv_python, '-m', 'speedtest'] + args,
                capture_output=True,
                text=True,
                check=True
            )
            output = result.stdout.strip()

            # Parse the output
            results = {}
            for line in output.split("\n"):
                if ": " in line:
                    key, value = line.split(": ", 1)
                    results[key.lower()] = value.strip()

            # Update the GUI with parsed results
            self.root.after(0, self.update_result, results)
        except subprocess.CalledProcessError as e:
            self.root.after(0, self.update_result, {"error": e.stderr.strip()})
        except Exception as e:
            self.root.after(0, self.update_result, {"error": str(e)})

    def update_result(self, results):
        # Re-enable all buttons
        self.full_test_button.config(state="normal")
        self.download_button.config(state="normal")
        self.upload_button.config(state="normal")
        self.ping_button.config(state="normal")

        if "error" in results:
            self.download_speed.set("Error")
            self.upload_speed.set("Error")
            self.ping.set(results["error"])
        else:
            # Update results based on the test type
            self.download_speed.set(results.get("download", "N/A"))
            self.upload_speed.set(results.get("upload", "N/A"))
            self.ping.set(results.get("ping", "N/A"))

def main():
    root = tk.Tk()
    app = SpeedTestApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
