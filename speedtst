#!/usr/bin/env python3
import tkinter as tk
from tkinter import ttk
import subprocess
import threading
import sys
import os
from tkinter import font

class SpeedTestApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Internet Speed Test")
        self.root.geometry("400x500")  # Smaller and taller window
        self.root.resizable(False, False)
        self.root.configure(bg="#1e1e2f")  # Dark background

        # Custom Fonts
        self.title_font = font.Font(family="Helvetica", size=20, weight="bold")
        self.result_font = font.Font(family="Helvetica", size=18, weight="bold")
        self.sub_font = font.Font(family="Helvetica", size=14)

        # Initialize variables
        self.download_speed = tk.StringVar(value="0.0 Mbps")
        self.upload_speed = tk.StringVar(value="0.0 Mbps")
        self.ping = tk.StringVar(value="0 ms")

        self.create_widgets()

    def create_widgets(self):
        # Title Label
        title_label = tk.Label(
            self.root,
            text="Speed Test",
            font=self.title_font,
            bg="#1e1e2f",
            fg="#ffffff"
        )
        title_label.pack(pady=(20, 10))

        # Spinner Animation
        self.spinner_canvas = tk.Canvas(self.root, width=100, height=100, bg="#1e1e2f", highlightthickness=0)
        self.spinner_canvas.pack(pady=10)
        self.spinner_angle = 0
        self.animate_spinner()

        # Start Test Button
        self.start_button = tk.Button(
            self.root,
            text="Start Test",
            font=("Helvetica", 14),
            bg="#6a0dad",
            fg="#ffffff",
            activebackground="#4b0082",
            activeforeground="#ffffff",
            relief="flat",
            command=self.start_test,
            padx=20,
            pady=10,
            borderwidth=0,
            highlightthickness=0
        )
        self.start_button.pack(pady=10)

        # Results Frame
        results_frame = tk.Frame(self.root, bg="#1e1e2f")
        results_frame.pack(pady=20)

        # Download Icon and Label
        download_icon = tk.Label(results_frame, text="‚¨áÔ∏è", font=("Arial", 18), bg="#1e1e2f", fg="#6a0dad")
        download_icon.grid(row=0, column=0, padx=10, pady=5, sticky="w")
        self.download_label = tk.Label(
            results_frame,
            textvariable=self.download_speed,
            font=self.result_font,
            bg="#1e1e2f",
            fg="#6a0dad"
        )
        self.download_label.grid(row=0, column=1, padx=10, pady=5, sticky="w")

        # Upload Icon and Label
        upload_icon = tk.Label(results_frame, text="‚¨ÜÔ∏è", font=("Arial", 18), bg="#1e1e2f", fg="#6a0dad")
        upload_icon.grid(row=1, column=0, padx=10, pady=5, sticky="w")
        self.upload_label = tk.Label(
            results_frame,
            textvariable=self.upload_speed,
            font=self.result_font,
            bg="#1e1e2f",
            fg="#6a0dad"
        )
        self.upload_label.grid(row=1, column=1, padx=10, pady=5, sticky="w")

        # Ping Icon and Label
        ping_icon = tk.Label(results_frame, text="üèì", font=("Arial", 18), bg="#1e1e2f", fg="#6a0dad")
        ping_icon.grid(row=2, column=0, padx=10, pady=5, sticky="w")
        self.ping_label = tk.Label(
            results_frame,
            textvariable=self.ping,
            font=self.result_font,
            bg="#1e1e2f",
            fg="#6a0dad"
        )
        self.ping_label.grid(row=2, column=1, padx=10, pady=5, sticky="w")

    def animate_spinner(self):
        # Create a rotating arc for the spinner
        self.spinner_canvas.delete("all")
        self.spinner_canvas.create_arc(
            10, 10, 90, 90,
            start=self.spinner_angle,
            extent=60,
            outline="#6a0dad",
            width=6,
            style="arc"
        )
        self.spinner_angle = (self.spinner_angle + 10) % 360
        self.root.after(50, self.animate_spinner)

    def start_test(self):
        # Disable the button and reset results
        self.start_button.config(state="disabled")
        self.download_speed.set("0.0 Mbps")
        self.upload_speed.set("0.0 Mbps")
        self.ping.set("0 ms")

        # Run the speed test in a separate thread
        threading.Thread(target=self.run_speedtest).start()

    def run_speedtest(self):
        try:
            # Use the virtual environment's Python to run speedtest-cli
            venv_python = os.path.join(os.getcwd(), "venv", "bin", "python")
            result = subprocess.run(
                [venv_python, '-m', 'speedtest', '--simple'],
                capture_output=True,
                text=True,
                check=True
            )
            output = result.stdout.strip()

            # Parse the output
            results = {}
            for line in output.split("\n"):
                key, value = line.split(": ")
                results[key.lower()] = value

            # Update the GUI with parsed results
            self.root.after(0, self.update_result, results)
        except Exception as e:
            self.root.after(0, self.update_result, {"error": str(e)})

    def update_result(self, results):
        # Re-enable the button
        self.start_button.config(state="normal")

        if "error" in results:
            self.download_speed.set("Error")
            self.upload_speed.set("Error")
            self.ping.set("Error")
        else:
            # Animate results
            self.animate_value(self.download_speed, "0.0 Mbps", f"{results.get('download', '0.0')} Mbps")
            self.animate_value(self.upload_speed, "0.0 Mbps", f"{results.get('upload', '0.0')} Mbps")
            self.animate_value(self.ping, "0 ms", f"{results.get('ping', '0')} ms")

    def animate_value(self, var, start, end, duration=1000, steps=50):
        """Animate a value from start to end."""
        start_val = float(start.split()[0])
        end_val = float(end.split()[0])
        step_size = (end_val - start_val) / steps
        delay = duration // steps

        def update(step):
            if step <= steps:
                current_val = start_val + step * step_size
                var.set(f"{current_val:.1f} {end.split()[1]}")
                self.root.after(delay, lambda: update(step + 1))

        update(0)

def main():
    root = tk.Tk()
    app = SpeedTestApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
